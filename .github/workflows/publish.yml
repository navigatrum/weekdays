name: Publish to npm

on:
  push:
    tags:
      - "v*.*.*" # e.g., v1.0.0

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: üß± Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: üß∞ Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: üì¶ Install dependencies
        run: pnpm install

      - name: ‚úÖ Run checks (lint, format, test)
        run: pnpm check

      - name: üèóÔ∏è Build
        run: pnpm build

      - name: üîñ Compare git tag and package version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          PKG_VERSION=$(node -p "require('./package.json').version")
          if [ "$TAG_VERSION" != "$PKG_VERSION" ]; then
          echo "Tag version ($TAG_VERSION) does not match package.json ($PKG_VERSION)"
          exit 1
          fi

      - name: üîç Check git status (allow only dist/)
        id: git-check
        run: |
          set -euo pipefail
          DIRTY=$(git status --porcelain --untracked-files=all || true)

          if [ -z "$DIRTY" ]; then
          echo "clean=true" >> $GITHUB_OUTPUT
          echo "only_dist=false" >> $GITHUB_OUTPUT
          echo "dirty_list=" >> $GITHUB_OUTPUT
          exit 0
          fi

          echo "$DIRTY"
          echo "dirty_list<<EOF" >> $GITHUB_OUTPUT
          echo "$DIRTY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          FILES=$(echo "$DIRTY" | sed -E 's/^[[:space:]]*..//' | sed -E 's/^[[:space:]]*//')
          ONLY_DIST=true
          while IFS= read -r f; do
          [ -z "$f" ] && continue
          case "$f" in
              dist|dist/*) ;;
              *)
              ONLY_DIST=false
              break
              ;;
          esac
          done <<< "$FILES"

          if $ONLY_DIST; then
          echo "clean=false" >> $GITHUB_OUTPUT
          echo "only_dist=true" >> $GITHUB_OUTPUT
          else
          echo "clean=false" >> $GITHUB_OUTPUT
          echo "only_dist=false" >> $GITHUB_OUTPUT
          fi

      - name: üöÄ Publish (clean tree)
        if: steps.git-check.outputs.clean == 'true'
        run: pnpm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: üöÄ Publish (only dist changed ‚Äî allow)
        if: steps.git-check.outputs.only_dist == 'true'
        run: pnpm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: ‚ùå Fail (unexpected dirty files)
        if: steps.git-check.outputs.clean == 'false' && steps.git-check.outputs.only_dist == 'false'
        run: |
          echo "Unexpected dirty files detected; aborting publish"
          echo "${{ steps.git-check.outputs.dirty_list }}"
          exit 1
